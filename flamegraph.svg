<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180" total_samples="110863"><g><title>libsystem_kernel.dylib`getentropy (12 samples, 0.01%)</title><rect x="0.0009%" y="165" width="0.0108%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="12"/><text x="0.2509%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (16 samples, 0.01%)</title><rect x="0.0884%" y="133" width="0.0144%" height="15" fill="rgb(217,0,24)" fg:x="98" fg:w="16"/><text x="0.3384%" y="143.50"></text></g><g><title>simple_light`geometry3d::transform::Transform::inv_transform_ray (221 samples, 0.20%)</title><rect x="0.1263%" y="133" width="0.1993%" height="15" fill="rgb(221,193,54)" fg:x="140" fg:w="221"/><text x="0.3763%" y="143.50"></text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (51 samples, 0.05%)</title><rect x="0.3256%" y="133" width="0.0460%" height="15" fill="rgb(248,212,6)" fg:x="361" fg:w="51"/><text x="0.5756%" y="143.50"></text></g><g><title>libsystem_m.dylib`atan2 (44 samples, 0.04%)</title><rect x="2.4048%" y="117" width="0.0397%" height="15" fill="rgb(208,68,35)" fg:x="2666" fg:w="44"/><text x="2.6548%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (18 samples, 0.02%)</title><rect x="2.5338%" y="69" width="0.0162%" height="15" fill="rgb(232,128,0)" fg:x="2809" fg:w="18"/><text x="2.7838%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (94 samples, 0.08%)</title><rect x="2.5067%" y="101" width="0.0848%" height="15" fill="rgb(207,160,47)" fg:x="2779" fg:w="94"/><text x="2.7567%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (85 samples, 0.08%)</title><rect x="2.5148%" y="85" width="0.0767%" height="15" fill="rgb(228,23,34)" fg:x="2788" fg:w="85"/><text x="2.7648%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (46 samples, 0.04%)</title><rect x="2.5500%" y="69" width="0.0415%" height="15" fill="rgb(218,30,26)" fg:x="2827" fg:w="46"/><text x="2.8000%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (16 samples, 0.01%)</title><rect x="2.5771%" y="53" width="0.0144%" height="15" fill="rgb(220,122,19)" fg:x="2857" fg:w="16"/><text x="2.8271%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (168 samples, 0.15%)</title><rect x="2.4445%" y="117" width="0.1515%" height="15" fill="rgb(250,228,42)" fg:x="2710" fg:w="168"/><text x="2.6945%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (135 samples, 0.12%)</title><rect x="2.5960%" y="117" width="0.1218%" height="15" fill="rgb(240,193,28)" fg:x="2878" fg:w="135"/><text x="2.8460%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (255 samples, 0.23%)</title><rect x="2.7214%" y="117" width="0.2300%" height="15" fill="rgb(216,20,37)" fg:x="3017" fg:w="255"/><text x="2.9714%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (19 samples, 0.02%)</title><rect x="2.9343%" y="101" width="0.0171%" height="15" fill="rgb(206,188,39)" fg:x="3253" fg:w="19"/><text x="3.1843%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (17 samples, 0.02%)</title><rect x="2.9361%" y="85" width="0.0153%" height="15" fill="rgb(217,207,13)" fg:x="3255" fg:w="17"/><text x="3.1861%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (35 samples, 0.03%)</title><rect x="3.0470%" y="85" width="0.0316%" height="15" fill="rgb(231,73,38)" fg:x="3378" fg:w="35"/><text x="3.2970%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (166 samples, 0.15%)</title><rect x="2.9514%" y="117" width="0.1497%" height="15" fill="rgb(225,20,46)" fg:x="3272" fg:w="166"/><text x="3.2014%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (81 samples, 0.07%)</title><rect x="3.0281%" y="101" width="0.0731%" height="15" fill="rgb(210,31,41)" fg:x="3357" fg:w="81"/><text x="3.2781%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (25 samples, 0.02%)</title><rect x="3.0786%" y="85" width="0.0226%" height="15" fill="rgb(221,200,47)" fg:x="3413" fg:w="25"/><text x="3.3286%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (200 samples, 0.18%)</title><rect x="3.1029%" y="117" width="0.1804%" height="15" fill="rgb(226,26,5)" fg:x="3440" fg:w="200"/><text x="3.3529%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (66 samples, 0.06%)</title><rect x="3.2914%" y="117" width="0.0595%" height="15" fill="rgb(249,33,26)" fg:x="3649" fg:w="66"/><text x="3.5414%" y="127.50"></text></g><g><title>simple_light`DYLD-STUB$$free (86 samples, 0.08%)</title><rect x="3.3564%" y="117" width="0.0776%" height="15" fill="rgb(235,183,28)" fg:x="3721" fg:w="86"/><text x="3.6064%" y="127.50"></text></g><g><title>simple_light`DYLD-STUB$$malloc (68 samples, 0.06%)</title><rect x="3.4340%" y="117" width="0.0613%" height="15" fill="rgb(221,5,38)" fg:x="3807" fg:w="68"/><text x="3.6840%" y="127.50"></text></g><g><title>simple_light`geometry3d::transform::Transform::inv_transform_ray (5,835 samples, 5.26%)</title><rect x="3.4953%" y="117" width="5.2633%" height="15" fill="rgb(247,18,42)" fg:x="3875" fg:w="5835"/><text x="3.7453%" y="127.50">simple..</text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (1,534 samples, 1.38%)</title><rect x="8.7586%" y="117" width="1.3837%" height="15" fill="rgb(241,131,45)" fg:x="9710" fg:w="1534"/><text x="9.0086%" y="127.50"></text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (335 samples, 0.30%)</title><rect x="9.8401%" y="101" width="0.3022%" height="15" fill="rgb(249,31,29)" fg:x="10909" fg:w="335"/><text x="10.0901%" y="111.50"></text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (89 samples, 0.08%)</title><rect x="10.0620%" y="85" width="0.0803%" height="15" fill="rgb(225,111,53)" fg:x="11155" fg:w="89"/><text x="10.3120%" y="95.50"></text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (25 samples, 0.02%)</title><rect x="10.1197%" y="69" width="0.0226%" height="15" fill="rgb(238,160,17)" fg:x="11219" fg:w="25"/><text x="10.3697%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (106 samples, 0.10%)</title><rect x="61.0510%" y="85" width="0.0956%" height="15" fill="rgb(214,148,48)" fg:x="67683" fg:w="106"/><text x="61.3010%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (62 samples, 0.06%)</title><rect x="61.3595%" y="69" width="0.0559%" height="15" fill="rgb(232,36,49)" fg:x="68025" fg:w="62"/><text x="61.6095%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (441 samples, 0.40%)</title><rect x="62.1028%" y="53" width="0.3978%" height="15" fill="rgb(209,103,24)" fg:x="68849" fg:w="441"/><text x="62.3528%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,824 samples, 2.55%)</title><rect x="61.1466%" y="85" width="2.5473%" height="15" fill="rgb(229,88,8)" fg:x="67789" fg:w="2824"/><text x="61.3966%" y="95.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,526 samples, 2.28%)</title><rect x="61.4154%" y="69" width="2.2785%" height="15" fill="rgb(213,181,19)" fg:x="68087" fg:w="2526"/><text x="61.6654%" y="79.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,323 samples, 1.19%)</title><rect x="62.5006%" y="53" width="1.1934%" height="15" fill="rgb(254,191,54)" fg:x="69290" fg:w="1323"/><text x="62.7506%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (559 samples, 0.50%)</title><rect x="63.1897%" y="37" width="0.5042%" height="15" fill="rgb(241,83,37)" fg:x="70054" fg:w="559"/><text x="63.4397%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3,547 samples, 3.20%)</title><rect x="60.6000%" y="101" width="3.1994%" height="15" fill="rgb(233,36,39)" fg:x="67183" fg:w="3547"/><text x="60.8500%" y="111.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (117 samples, 0.11%)</title><rect x="63.6939%" y="85" width="0.1055%" height="15" fill="rgb(226,3,54)" fg:x="70613" fg:w="117"/><text x="63.9439%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (129 samples, 0.12%)</title><rect x="63.7995%" y="101" width="0.1164%" height="15" fill="rgb(245,192,40)" fg:x="70730" fg:w="129"/><text x="64.0495%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (93 samples, 0.08%)</title><rect x="64.6104%" y="85" width="0.0839%" height="15" fill="rgb(238,167,29)" fg:x="71629" fg:w="93"/><text x="64.8604%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (59 samples, 0.05%)</title><rect x="64.6943%" y="85" width="0.0532%" height="15" fill="rgb(232,182,51)" fg:x="71722" fg:w="59"/><text x="64.9443%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (1,579 samples, 1.42%)</title><rect x="63.9158%" y="101" width="1.4243%" height="15" fill="rgb(231,60,39)" fg:x="70859" fg:w="1579"/><text x="64.1658%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (657 samples, 0.59%)</title><rect x="64.7475%" y="85" width="0.5926%" height="15" fill="rgb(208,69,12)" fg:x="71781" fg:w="657"/><text x="64.9975%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (553 samples, 0.50%)</title><rect x="64.8413%" y="69" width="0.4988%" height="15" fill="rgb(235,93,37)" fg:x="71885" fg:w="553"/><text x="65.0913%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (960 samples, 0.87%)</title><rect x="66.5190%" y="69" width="0.8659%" height="15" fill="rgb(213,116,39)" fg:x="73745" fg:w="960"/><text x="66.7690%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,713 samples, 2.45%)</title><rect x="65.3401%" y="101" width="2.4472%" height="15" fill="rgb(222,207,29)" fg:x="72438" fg:w="2713"/><text x="65.5901%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,070 samples, 1.87%)</title><rect x="65.9201%" y="85" width="1.8672%" height="15" fill="rgb(206,96,30)" fg:x="73081" fg:w="2070"/><text x="66.1701%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (446 samples, 0.40%)</title><rect x="67.3850%" y="69" width="0.4023%" height="15" fill="rgb(218,138,4)" fg:x="74705" fg:w="446"/><text x="67.6350%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_free_definite_size (66 samples, 0.06%)</title><rect x="67.7873%" y="101" width="0.0595%" height="15" fill="rgb(250,191,14)" fg:x="75151" fg:w="66"/><text x="68.0373%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (55 samples, 0.05%)</title><rect x="67.8468%" y="101" width="0.0496%" height="15" fill="rgb(239,60,40)" fg:x="75217" fg:w="55"/><text x="68.0968%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (166 samples, 0.15%)</title><rect x="67.8964%" y="101" width="0.1497%" height="15" fill="rgb(206,27,48)" fg:x="75272" fg:w="166"/><text x="68.1464%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (199 samples, 0.18%)</title><rect x="68.0461%" y="101" width="0.1795%" height="15" fill="rgb(225,35,8)" fg:x="75438" fg:w="199"/><text x="68.2961%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.02%)</title><rect x="68.2265%" y="101" width="0.0162%" height="15" fill="rgb(250,213,24)" fg:x="75638" fg:w="18"/><text x="68.4765%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (131 samples, 0.12%)</title><rect x="68.2428%" y="101" width="0.1182%" height="15" fill="rgb(247,123,22)" fg:x="75656" fg:w="131"/><text x="68.4928%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (151 samples, 0.14%)</title><rect x="68.3610%" y="101" width="0.1362%" height="15" fill="rgb(231,138,38)" fg:x="75787" fg:w="151"/><text x="68.6110%" y="111.50"></text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (32,326 samples, 29.16%)</title><rect x="68.4972%" y="101" width="29.1585%" height="15" fill="rgb(231,145,46)" fg:x="75938" fg:w="32326"/><text x="68.7472%" y="111.50">simple_light`rendering::samplers::uniform_sampl..</text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (6,272 samples, 5.66%)</title><rect x="91.9982%" y="85" width="5.6574%" height="15" fill="rgb(251,118,11)" fg:x="101992" fg:w="6272"/><text x="92.2482%" y="95.50">simple_..</text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (1,403 samples, 1.27%)</title><rect x="96.3901%" y="69" width="1.2655%" height="15" fill="rgb(217,147,25)" fg:x="106861" fg:w="1403"/><text x="96.6401%" y="79.50"></text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (292 samples, 0.26%)</title><rect x="97.3923%" y="53" width="0.2634%" height="15" fill="rgb(247,81,37)" fg:x="107972" fg:w="292"/><text x="97.6423%" y="63.50"></text></g><g><title>simple_light`rendering::samplers::uniform_sample_horizontal_disc (64 samples, 0.06%)</title><rect x="97.5979%" y="37" width="0.0577%" height="15" fill="rgb(209,12,38)" fg:x="108200" fg:w="64"/><text x="97.8479%" y="47.50"></text></g><g><title>simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray (110,845 samples, 99.98%)</title><rect x="0.0153%" y="165" width="99.9838%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="110845"/><text x="0.2653%" y="175.50">simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray</text></g><g><title>simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray (110,839 samples, 99.98%)</title><rect x="0.0207%" y="149" width="99.9784%" height="15" fill="rgb(248,47,43)" fg:x="23" fg:w="110839"/><text x="0.2707%" y="159.50">simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray</text></g><g><title>simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray (110,450 samples, 99.63%)</title><rect x="0.3716%" y="133" width="99.6275%" height="15" fill="rgb(221,10,30)" fg:x="412" fg:w="110450"/><text x="0.6216%" y="143.50">simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray</text></g><g><title>simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray (99,618 samples, 89.86%)</title><rect x="10.1422%" y="117" width="89.8569%" height="15" fill="rgb(210,229,1)" fg:x="11244" fg:w="99618"/><text x="10.3922%" y="127.50">simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray</text></g><g><title>simple_light`solar_model::daylight_coefficients::DCFactory::trace_ray (2,598 samples, 2.34%)</title><rect x="97.6557%" y="101" width="2.3434%" height="15" fill="rgb(222,148,37)" fg:x="108264" fg:w="2598"/><text x="97.9057%" y="111.50">s..</text></g><g><title>all (110,863 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="110863"/><text x="0.2500%" y="255.50"></text></g><g><title>dyld`start (110,863 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="110863"/><text x="0.2500%" y="239.50">dyld`start</text></g><g><title>simple_light`main (110,863 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="110863"/><text x="0.2500%" y="223.50">simple_light`main</text></g><g><title>simple_light`std::sys_common::backtrace::__rust_begin_short_backtrace (110,863 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="110863"/><text x="0.2500%" y="207.50">simple_light`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple_light`simple_light::main (110,863 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(246,177,23)" fg:x="0" fg:w="110863"/><text x="0.2500%" y="191.50">simple_light`simple_light::main</text></g></svg></svg>