var searchIndex = JSON.parse('{\
"simple_light":{"doc":"","t":[5],"n":["main"],"q":["simple_light"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"solar_model":{"doc":"This is SIMPLE’s solar calculation module. It is …","t":[6,17,2,0,0,3,12,12,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,18,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,12,11,11,11,11],"n":["Float","PI","SolarModel","model","solar_surface","SolarModel","back_fenestrations_dc","back_surfaces_dc","borrow","borrow_mut","from","front_fenestrations_dc","front_surfaces_dc","into","march","module_name","new","options","solar","try_from","try_into","type_id","update_ir_radiation","update_solar_radiation","vzip","DELTA","SolarSurface","back_rays","back_solar_irradiance","borrow","borrow_mut","calc_back_solar_dc_matrix","calc_front_solar_dc_matrix","from","front_rays","front_solar_irradiance","get_back_solar_dc_matrix","get_front_solar_dc_matrix","get_sampler","into","make_fenestrations","make_surfaces","new","normal","points","try_from","try_into","type_id","vzip"],"q":["solar_model","","","","","solar_model::model","","","","","","","","","","","","","","","","","","","","solar_model::solar_surface","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The kind of Floating point number used in the library… …","Well, Pi.","","The main export of this module: A Simulation Model for …","","The main model","The Daylight Coefficients matrix for the back-side of the …","The Daylight Coefficients matrix for the back-side of the  …","","","Returns the argument unchanged.","The Daylight Coefficients matrix for the front-side of the …","The scene that makes up this model from a radiation point …","Calls <code>U::from(self)</code>.","","","","The options for the model.","The calculator for solar position and other solar variables","","","","This function makes the IR heat transfer Zero… we will …","","","Offset for the starting point of the rays.","Structure that can help calculate solar radiation","Gets the back rays of a surface","Calculates the Daylight Coefficient matrix for the back of …","","","Receives a list of <code>SolarSurface</code> objects as well as the …","Receives a list of <code>SolarSurface</code> objects as well as the …","Returns the argument unchanged.","Gets the front rays of a surface","Calculates the Daylight Coefficient matrix for the front …","Gets the back Daylight Coefficient Matrix that can be used …","Gets the front Daylight Coefficient Matrix that can be …","","Calls <code>U::from(self)</code>.","Builds a set of SolarSurfaces from Fenestrations","Builds a set of SolarSurfaces from Surfaces","","","","","","",""],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,0,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,[[]],[[1,2,3,4,5],[[7,[6]]]],[[],8],[[9,10,4,11,12],[[7,[6]]]],0,0,[[],7],[[],7],[[],13],[[1,4,5]],[[1,2,14,4,5]],[[]],0,0,[15,[[17,[16]]]],[[15,18,19],20],[[]],[[]],[[18,19],20],[[18,19],20],[[]],[15,[[17,[16]]]],[[15,18,19],20],[[[21,[6]],18,19],[[7,[20,6]]]],[[[21,[6]],18,19],[[7,[20,6]]]],[[[17,[22]]],23],[[]],[[11,12],[[17,[15]]]],[[11,12],[[17,[15]]]],[[12,24],15],0,0,[[],7],[[],7],[[],13],[[]]],"p":[[3,"SolarModel"],[3,"Date"],[8,"Weather"],[3,"SimpleModel"],[6,"SimulationState"],[3,"String"],[4,"Result"],[15,"str"],[3,"MetaOptions"],[3,"SolarOptions"],[3,"SimulationStateHeader"],[15,"usize"],[3,"TypeId"],[3,"CurrentWeather"],[3,"SolarSurface"],[3,"Ray3D"],[3,"Vec"],[3,"Scene"],[3,"DCFactory"],[6,"Matrix"],[4,"Option"],[6,"Float"],[8,"Fn"],[3,"Polygon3D"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
